/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.team5.senior_project;

import java.io.File;
import java.util.List;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import java.awt.*;

/**
 *
 * @author Jack
 */
public class TransitionPanel extends javax.swing.JPanel {

    private final Transition transitionManager = new Transition();
    private TimelinePanel timelinePanelObject;
    private javax.swing.JLabel imageLabel;

    /**
     * Creates new form TransitionPanel
     */
    public TransitionPanel(TimelinePanel timelinePanelObject, javax.swing.JLabel imageLabel) {
        this.timelinePanelObject = timelinePanelObject;
        this.imageLabel = imageLabel;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        transitionTest = new javax.swing.JButton();
        transitionBox = new javax.swing.JComboBox<>();

        transitionTest.setText("Preview Transition");
        transitionTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transitionTestActionPerformed(evt);
            }
        });

        transitionBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Transition", "Cross Fade", "Wipe Up", "Wipe Right", "Wipe Down", "Wipe Left" }));
        transitionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transitionBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transitionTest)
                    .addComponent(transitionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(268, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(transitionTest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transitionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(243, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public javax.swing.JComboBox getTransitionBox() {
        return transitionBox;
    }

    private void transitionBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        int selectionIndex = transitionBox.getSelectedIndex();
        Slide selectedItem = timelinePanelObject.getImageList().getSelectedValue();
        if (selectedItem != null) {
            // Assuming the enum order of TransitionType matches the combo box order:
            TransitionType newTransition = TransitionType.values()[selectionIndex];
            selectedItem.setTransition(newTransition);
            System.out.println("Transition updated to: " + newTransition);
        }
    }   

    private void transitionTestActionPerformed(java.awt.event.ActionEvent evt) {
        // Get the currently selected Slide from the timeline panel
        Slide selectedItem = timelinePanelObject.getImageList().getSelectedValue();
        if (selectedItem == null) {
            System.out.println("No slide selected for transition.");
            return;
        }
        ImageIcon labelIcon = (ImageIcon) imageLabel.getIcon();
        if (labelIcon == null) {
            System.out.println("No image available for transition.");
            return;
        }
        
        // Use the current image as the "next" image.
        BufferedImage nextImage = Transition.toBufferedImage(labelIcon.getImage());
        int currentIndex = timelinePanelObject.getImageList().getSelectedIndex();
        if (currentIndex < 0) {
            currentIndex = 0;
        }
        
        // Use the ordered image list from the timeline panel
        List<File> currentImages = timelinePanelObject.getImages();
        BufferedImage prevImage = nextImage;
        if (currentImages.size() >= 2) {
            int wrapIndex = (currentIndex - 1 >= 0) ? currentIndex - 1 : currentImages.size() - 1;
            ImageIcon prevIcon = new ImageIcon(currentImages.get(wrapIndex).getAbsolutePath());
            prevImage = Transition.toBufferedImage(prevIcon.getImage());
        } else {
            try {
                Image placeholder = new ImageIcon("Placeholder.png").getImage();
                if (placeholder != null) {
                    prevImage = Transition.toBufferedImage(placeholder);
                }
            } catch (Exception e) {
                System.out.println("Error obtaining default image for transitions: " + e);
            }
        }
        
        // Instead of using imageTransitions, get the transition from the selected item
        TransitionType type = selectedItem.getTransition();
        transitionManager.doTransition(prevImage, nextImage, imageLabel, type);
    }

    // Called when an image is selected in the timeline.
    public void updateTransitionBox(TimelinePanel timelinePanelObject) {
        Slide selectedItem = timelinePanelObject.getImageList().getSelectedValue();
        if (selectedItem == null) return;
        TransitionType currentTransition = selectedItem.getTransition();
        String displayText;
        switch (currentTransition) {
            case INSTANT:
                displayText = "No Transition";
                break;
            case CROSS_FADE:
                displayText = "Cross Fade";
                break;
            case WIPE_UP:
                displayText = "Wipe Up";
                break;
            case WIPE_RIGHT:
                displayText = "Wipe Right";
                break;
            case WIPE_DOWN:
                displayText = "Wipe Down";
                break;
            case WIPE_LEFT:
                displayText = "Wipe Left";
                break;
            default:
                displayText = "No Transition";
        }
        transitionBox.setSelectedItem(displayText);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> transitionBox;
    private javax.swing.JButton transitionTest;
    // End of variables declaration//GEN-END:variables
}
